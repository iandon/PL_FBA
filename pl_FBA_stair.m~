function myscreen = pl_FBA_stair(observer,varargin)

%%% Pilot with only valid and neutral conditions
%
% https://github.com/anasuyadas/fMRI_task.git


global stimulus;
global MGL;

mglOpen

% check arguments
% if ~any(nargin == 3)
%     help transientAttention
%     return
% % end
% 
eval(evalargs(varargin,0,0,{'indContrast','diagonal','IndTilt','Eye'}));

if ieNotDefined('indContrast'),indContrast = .8;end % initialize some default contrast vals
if ieNotDefined('oriType'),oriType = 1;end % default is 45 & -45 (1), other option is 90 & 0 (2)
if ieNotDefined('indTilt'),indTilt = 20;end % default tilt
if ieNotDefined('Eye'),Eye = 0;end % no eye-tracking
if ieNotDefined('cueType'),cueType = 0;end


thisdir = pwd;
% make a data directory if necessary
if ~isdir(fullfile(thisdir,'data'))
    disp('Making data directory');
    mkdir('data');
end

% make an observer directory if necessary
datadirname = fullfile(thisdir,'data',observer);
if ~isdir(datadirname);
    disp(sprintf('Making observer directory %s',datadirname));
    mkdir(datadirname);
end

disp(sprintf('[ DATA ] saving data in: %s',datadirname));

stimulus = [];

% clearing old variables:
clear task myscreen;

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% initalize the screen
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% initalize the screen

stimulus.EyeTrack=Eye;
myscreen = initScreen('CMU_CRT');
myscreen.datadir = datadirname;
myscreen.allowpause = 0;
myscreen.saveData = -2;
myscreen.background=.5;
mglVisualAngleCoordinates(myscreen.displayDistance,myscreen.displaySize)
if stimulus.EyeTrack
    myscreen = eyeCalibDisp(myscreen);
    myscreen.eyetracker.savedata = true;%%%%% TO ADD FOR ONLINE EYETRACKING
    myscreen.eyetracker.data = [1 1 1 0];%%%%% TO ADD FOR ONLINE EYETRACKING
end



stair.upRule = 1;
stair.downRule = 2;
stair.startThresh = indTilt;
stair.stepSize = 10;
stair.minStepSize = .1;
stair.halfRule = 'levitt';

stimulus.stair = upDownStaircase(stair.upRule,stair.downRule,stair.startThresh,[stair.stepSize, stair.minStepSize],stair.halfRule);
stimulus.stair.minThreshold = .005; stimulus.stair.maxThreshold = 40;

%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% initialize the task
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

task{1}.waitForBacktick = 0;
task{1}.segmin =     [0.5, 0.25, 0.5, 0.15, 0.1, 0.15, 0.4, 0.5, 1, .03, 2];  % segments: 1:fixation, 2:cue 3: ISI 4:interval 1, 5: ISI 2, , 6: interval 2,7: ISI 3, 8:response cue 9:response, 10:feedback dur, 11:ITI 
task{1}.segmax =     [0.5, 0.25, 0.5, 0.15, 0.1, 0.15, 0.4, 0.5, 1, .03, 2]; 
task{1}.segquant =   [0 0 0 0 0 0 0 0 0 0 0]; % I guess, ITI varies in steps of 0.25
task{1}.getResponse = [0 0 0 0 0 0 0 0 1 0 0]; % responses are allowed during response intervals



n_repeats = 2; % n = 5 -> 108 trials per block (1*2*3*3 *5)

 
[contrast,ori,targetAxis,baseOriTarget,baseOriDistractor,repeat] = ndgrid(1,1:2,1:2,1:3,1:3,1:n_repeats);
%contrast =3 is blank trials. We wants on ~10% of total trials to be blank
%trials. Re-assign 4 out of 6 blank trials to be non-blank stim containing
%trials
% contrast(3,:,[1:2],1)=1;
% contrast(3,:,[1:2],2)=2; 

stimulus.oriType = oriType;

if oriType == 1
    stimulus.baseOri = [ 42,  45,  48;...
                        -42, -45, -48];
elseif oriType == 2
    stimulus.baseOri = [-3,  0,  3;...
                        87, 90, 93];
end

stimulus.contrast = indContrast;
stimulus.numTrials = length(ori(:)); % n*n_repeats

task{1}.numTrials = length(ori(:)); % n*n_repeats
task{1}.origNumTrials = length(ori(:)); % n*n_repeats
random_order = randperm(task{1}.numTrials);
 

stimulus.randVars.baseOriTarget = baseOriTarget(random_order);
stimulus.randVars.baseOriDistractor = baseOriDistractor(random_order);
stimulus.randVars.contrast = contrast(random_order);

stimulus.randVars.targetOriAxis = targetAxis(random_order);
stimulus.randVars.distractorOriAxis = ((stimulus.randVars.targetOriAxis-1.5)*-1)+1.5; %Whenever target is 1, distractor is 2, and vice versa

stimulus.randVars.targetOriOffBase = ori(random_order);

task{1}.randVars.len_ = task{1}.numTrials;
task{1}.randVars.trialIndex = random_order;

%randomize which grid locations are the target and distractor, AND which
%jitter locations are used for each grid location on each interval on each
%trial 
%       (target and distractor locations can repeat -> just purely random;
%       jitter locations cannot repeat-> choose from the remaining, unused jitter
%       locations for each grid locations)

% for fixation check/recalibration
stimulus.trialend = 0;
stimulus.trialnum=1;
stimulus.FixationBreak=zeros(1,task{1}.numTrials);
stimulus.FixationBreakCurrent = 0;
stimulus.FixationBreakRecent= 0;
stimulus.trialAttemptNum = 1;
stimulus.numFixBreaks = 0;
stimulus.fixationBreakTrialVect = 0;
% stimulus.LocationIndices=unique(location);
stimulus.upDated = 1;
stimulus.fixBreakTRACKindex = 0;
stimulus.testFix1 = 0;
stimulus.firstFixBreak = 0;
stimulus.increasedAttemptNum= 0;
stimulus.makeTexMtx = 0;

stimulus.indTilt=indTilt;
stimulus.preCue.type = cueType;

task{1}.random = 1;
[task{1}, myscreen] = initTask(task{1},myscreen,@StartSegmentCallback,@DrawStimulusCallback,@responseCallback,@recalibrateCallback);
%% 
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% initialize the stimulus
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

myscreen = initStimulus('stimulus',myscreen);
stimulus = myInitStimulus(stimulus,myscreen,task);
myscreen = eyeCalibDisp(myscreen);
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Main display loop
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
phaseNum = 1;

while (phaseNum <= length(task)) && ~myscreen.userHitEsc
    % update the task
    % runs automatically the task, you only need to change: StartSegmentCallback,DrawStimulusCallback,responseCallback
    
    [task,myscreen,phaseNum] = updateTaskHack(task,myscreen,phaseNum);
    % flip screen
    myscreen = tickScreen(myscreen,task);
end
clear stimulus.tmp

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% end of the experiment
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
myscreen = endTask(myscreen,task);
end
%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% TASK 1: function that gets called at the start of each segment
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
function [task, myscreen] = StartSegmentCallback(task, myscreen)
% segments: 1:ITI,   2:fixation,    3:stimulus, 4:response
global stimulus

if (task.thistrial.thisseg == 11) % ITI
    stimulus.trialend = stimulus.trialend + 1;
    stimulus.increasedAttemptNum = 0;
    stimulus.testFix1 = 0;
    stimulus.makeTexMtx = 0;
elseif (task.thistrial.thisseg == 1) % fixation
    iti = .6;%task.thistrial.iti;
    task.thistrial.seglen = [0.5, 0.25, 0.5, 0.15, 0.1, 0.15, 0.4, 0.5, 1, .03, 2];
    %need to make sure that there are only two locations per run
    if ~stimulus.makeTexMtx
        for gLoc = 1:(stimulus.numGridLocs/2)
            for int = 1:2
            stimulus.tmp.texTarg(gLoc,int) = stimulus.tex{task.thistrial.trialIndex,...
                                             stimulus.randVars.targetGridLocs(task.thistrial.trialIndex,int,gLoc),int};
            stimulus.tmp.texDist(gLoc,int) = stimulus.tex{task.thistrial.trialIndex,...
                                             stimulus.randVars.distractorGridLocs(task.thistrial.trialIndex,int,gLoc),int};
            stimulus.tmp.targetLocVisAng(gLoc,:,int) =   stimulus.gridLoc{stimulus.randVars.targetGridLocs(task.thistrial.trialIndex,int,gLoc)}...
                                                        (stimulus.randVars.jitterLoc(int,stimulus.randVars.targetGridLocs(task.thistrial.trialIndex,int,gLoc),int),:);
            stimulus.tmp.distractorLocVisAng(gLoc,:,int) =   stimulus.gridLoc{stimulus.randVars.distractorGridLocs(task.thistrial.trialIndex,int,gLoc)}...
                                                            (stimulus.randVars.jitterLoc(int,stimulus.randVars.distractorGridLocs(task.thistrial.trialIndex,int,gLoc),int),:);
            end
        end
            stimulus.makeTexMtx = 1;
    end
    
    stimulus.FixationStarted=0;
    %response cue
    stimulus.tmp.respcueLocation=stimulus.randVars.targetOriAxis(task.thistrial.trialIndex); 
    %stimulus.tmp.WedgeStart=stimulus.CueWedges(task.thistrial.targetLocation);
    
    if ~stimulus.testFix1 
        stimulus.FixationBreak(task.trialnum) = 0;
        stimulus.FixationBreakCurrent = 0;
        stimulus.updateCurrent = 1;
        stimulus.upDated = 0;
        stimulus.testFix1  = 1;
    end
    
    if (1 < task.trialnum) && ~stimulus.increasedAttemptNum
        stimulus.trialAttemptNum = stimulus.trialAttemptNum+1;
        stimulus.increasedAttemptNum = 1;
    end
    
    %just neutral cues - no exo cues
    for i=1:2
        stimulus.tmp.preCueNeutLocation{i}=stimulus.preCueNeutLocation{i};
    end
    
    
elseif (task.thistrial.thisseg == 9) % response
    stimulus.trialnum = stimulus.trialnum + 1;
%     if ~task.thistrial.gotResponse
%         mglPlaySound(stimulus.noanswer);
%     end;
end

mglClearScreen(stimulus.grayColor);
setGammaTable(1);
end


%%
function [task, myscreen] = DrawStimulusCallback(task, myscreen)
global stimulus;


mglClearScreen(stimulus.grayColor);%###

if (task.thistrial.thisseg == 11) % ITI
    drawFixation(task);
elseif (task.thistrial.thisseg == 1) % Initial Fixation
    
    if ~stimulus.testFix1 
        stimulus.FixationBreak(task.trialnum) = 0;
        stimulus.FixationBreakCurrent = 0;
        stimulus.updateCurrent = 1;
        stimulus.upDated = 0;
        stimulus.testFix1  = 1;
    end
   
    if (1 < task.trialnum) && ~stimulus.increasedAttemptNum
        stimulus.trialAttemptNum = stimulus.trialAttemptNum+1;
        stimulus.increasedAttemptNum = 1;
    end
    
    drawFixation(task);
    
    if stimulus.EyeTrack && ~stimulus.FixationBreakCurrent, fixCheck(myscreen,task); end
elseif (task.thistrial.thisseg == 2) % Pre Cue
    drawFixation(task);
    stimulus.makeTexMtx = 0;
    
    if stimulus.EyeTrack && ~stimulus.FixationBreakCurrent, fixCheck(myscreen,task); end
    if ~stimulus.FixationBreakCurrent  || ~stimulus.EyeTrack
     drawPreCue(stimulus.tmp.respcueLocation);
%       drawRespCue(stimulus.tmp.respcueLocation)
    end
    
elseif (task.thistrial.thisseg == 3) % ISI 1
    drawFixation(task);
    if stimulus.EyeTrack && ~stimulus.FixationBreakCurrent, fixCheck(myscreen,task); end
    
elseif (task.thistrial.thisseg == 4) % Interval 1
    drawFixation(task);
    if stimulus.EyeTrack && ~stimulus.FixationBreakCurrent, fixCheck(myscreen,task); end
    % the contrast value is the threshold itself
    if ~stimulus.FixationBreakCurrent  || ~stimulus.EyeTrack
        %target gabors
            drawGaborGrid(stimulus.contrast,...
                          stimulus.tmp.targetLocVisAng(:,:,1),...
                          stimulus.baseOri(stimulus.randVars.targetOriAxis(task.thistrial.trialIndex),stimulus.randVars.baseOriTarget(task.thistrial.trialIndex)),...
                          stimulus.tmp.texTarg(:,1),1,task.thistrial.trialIndex);
        %distractor gabor
            drawGaborGrid(stimulus.contrast,...
                          stimulus.tmp.distractorLocVisAng(:,:,1),...
                         (stimulus.baseOri(stimulus.randVars.distractorOriAxis(task.thistrial.trialIndex),stimulus.randVars.baseOriDistractor(task.thistrial.trialIndex))),...
                          stimulus.tmp.texDist(:,1),1,task.thistrial.trialIndex);
    end
    
elseif (task.thistrial.thisseg == 5) % ISI 2
    drawFixation(task);
    if stimulus.EyeTrack && ~stimulus.FixationBreakCurrent, fixCheck(myscreen,task); end
    
elseif (task.thistrial.thisseg == 6) % Interval 2
    drawFixation(task);
    if stimulus.EyeTrack && ~stimulus.FixationBreakCurrent, fixCheck(myscreen,task); end
    % the contrast value is the threshold itself
    if ~stimulus.FixationBreakCurrent  || ~stimulus.EyeTrack
        %target gabors
            drawGaborGrid(stimulus.contrast,...
                          stimulus.tmp.targetLocVisAng(:,:,2),...
                         (stimulus.baseOri(stimulus.randVars.targetOriAxis(task.thistrial.trialIndex),stimulus.randVars.baseOriTarget(task.thistrial.trialIndex))...
                             +(stimulus.rotation(stimulus.randVars.targetOriOffBase(task.thistrial.trialIndex))*stimulus.stair.threshold)),...
                          stimulus.tmp.texTarg(:,2),1,task.thistrial.trialIndex);
        %distractor gabor
            drawGaborGrid(stimulus.contrast,...
                          stimulus.tmp.distractorLocVisAng(:,:,2),...
                         (stimulus.baseOri(stimulus.randVars.distractorOriAxis(task.thistrial.trialIndex),stimulus.randVars.baseOriDistractor(task.thistrial.trialIndex))),...
                          stimulus.tmp.texDist(:,2),1,task.thistrial.trialIndex);
    end
elseif (task.thistrial.thisseg == 7) % ISI 3
    drawFixation(task);
    
elseif (task.thistrial.thisseg == 8) % Resp Cue
    drawFixation(task);
    if stimulus.EyeTrack && ~stimulus.FixationBreakCurrent, fixCheck(myscreen,task); end
    if ~stimulus.FixationBreakCurrent  || ~stimulus.EyeTrack
        drawRespCue(stimulus.tmp.respcueLocation); % has to be a positive integer
    end

elseif (task.thistrial.thisseg == 9) % Resp Window
    drawFixation(task);
    
elseif (task.thistrial.thisseg == 10) % Feedback
    drawFixation(task);
    
end

end

%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% response call back
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
function [task, myscreen] = responseCallback(task,myscreen)
global stimulus;
mglClearScreen(stimulus.grayColor); %###
if ~task.thistrial.gotResponse
    % check response correct or not
    stimulus.tmp.response = task.thistrial.whichButton == (stimulus.randVars.targetOriOffBase(task.thistrial.trialIndex)); %1 for left and 2 for right
end

if ~stimulus.FixationBreakCurrent || ~stimulus.EyeTrack
    stimulus.stair = upDownStaircase(stimulus.stair,stimulus.tmp.response);
end

end
%%
% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% % staircase call back
% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% 
% function [task,stimulus] = staircaseCallback(task,stimulus)
% global stimulus;
% stimulus.stair = upDownStaircase(stimulus.stair,stimulus.tmp.response);
% 
% end
function drawRespCue(loc)
    global stimulus
    
    mglLines2(stimulus.respcueLocation{loc}(1), stimulus.respcueLocation{loc}(3),...
              stimulus.respcueLocation{loc}(2), stimulus.respcueLocation{loc}(4),stimulus.respCue.width,stimulus.black);
    
end

%% recalibrateCallback
function [task, myscreen] = recalibrateCallback(task,myscreen)
global stimulus



if stimulus.FixationBreakCurrent
    
    if  stimulus.numFixBreaks < 2
        
        stimulus.FixationBreakRecent = 0;
        stimulus.recalib(stimulus.trialAttemptNum) = 0;
    elseif (stimulus.fixationBreakTrialVect(stimulus.numFixBreaks) - stimulus.fixationBreakTrialVect(stimulus.numFixBreaks-1)) < 3
        
        if stimulus.FixationBreakRecent < 3
            
            stimulus.FixationBreakRecent = stimulus.FixationBreakRecent+1;
            stimulus.recalib(stimulus.trialAttemptNum) = 0;
        else
            stimulus.FixationBreakRecent = 0;
            stimulus.recalib(stimulus.trialAttemptNum) = 1;
%             myscreen = eyeCalibDisp(myscreen);
            eyeCalibDisp(myscreen);            
            
        end
            
    else
        stimulus.FixationBreakRecent = 0;
        stimulus.recalib(stimulus.trialAttemptNum) = 0;
    end
else
    stimulus.recalib(stimulus.trialAttemptNum) = 0;
end



end
